File system commands: Simple commands used to navigate and display the file system
Show the present working directory: ``$ pwd``
	Don't resolve symlinks: (Default) ``-L``
	Resolve symlinks: ``-P``
Change the pwd to the specified path, or if none are specified, the user's home directory: ``$ cd {path}``
Show the contents of the pwd, or optionally a specified directory: ``$ ls {path}``
	Show all files: ``--all``,``-a``
	Show all files excpet current and parent directory links: ``--almost-all``,``-A``
	Don't show backup files (ending in ~): ``--ignore-backups``,``-B``
	Show the name of the directory instead of the contents: ``--directory``,``-d``
	Hide files matching a certain regex: ``--ignore=[pattern]``,``-I [pattern]``
	Hide files matching a certain regex except with -a and -A: ``--hide=[pattern]``
	Show the index of each file: ``--inode``,``-i``
	Show information about the file a link goes to instead of the link itself: ``--deference``,``-L``
	Show the size of each file: ``--size``,``-s``
		Display the size in kilobytes: ``-k``
	Format hidden characters
		Show hidden characters normally: ``--show-control-chars``
		Show hidden characters in C style: ``--escape``,``-b``
		Replace hidden characters with a ?: ``--hide-control-chars``,``-q``
	Format the indicator at the end of each entry: ``--indicator-style=[option]``
		Show a slash at the end of each directory name: ``--indicator-style=slash``,``-p``
		Display an indicator based on the file type: ``--indicator-style=classify``,``--classify``,``-F``
		Display an indicator based on the file type, except executables: ``--file-type``
	Format the output in a certain way: ``--format=[option]``
		Show files in a grid: ``--format=across``,``--format=horizontal``,``-x``
		Show files in a single column: ``--format=single-column``,``-1``
		Show files in a comma separated list: ``--format=commas``,``-m``
		Show files in a detailed single column: ``--format=long``,``--format=verbose``,``-l``
			Don't show group informatino: ``-o``
			Show the author of each file: ``--author``
			Show file sizes in a human readable format: ``--human-readable``,``-h``
			Show user and group IDs instead of names: ``--numeric-uid-gid``,``-n``
	Sort the output in a certain way: ``--sort=[option]``
		Sort by the file name: (Default)
		Don't sort the files: ``--sort=none``,``-U``
		Sort by the file size: ``--sort=size``,``-S``
		Sort by the time: ``--sort=time``,``-t``
		Sort by the version: ``--sort=version``,``-v``
		Sort by the file extension: ``--sort=extension``,``-X``
	Change the default time type used: ``--time=[option]``
		Use access time: ``--time=atime``,``-u``
		Use change time: ``--time=ctime``,``-c``
		Use creation time: ``--time=btime``
	Change how the time is displayed: ``--time-style=[style]``
	Set which colors each file type is: ``LS_COLORS="[type]=[style #];[color #]:[type]=[style #];[color #]: ..."``
Move a file to a new path / into an existing directory: ``$ mv [file/s] [new path]``,``$ mv [file] [existing directory]``
	Prompt before overwriting a file: ``--interactive``,``-i``
	Don't prompt before overwriting a file: ``--force``,``-f``
	Never overwrite a file: ``--no-clobber``,``-n``
	Only overwrite a file if the file overwriting it is newer: ``--update``,``-u``
	Create a backup if overwriting a different file: ``-b``
	Give the backup file a certain suffix: ``-S [suffix]``,``--suffix=[suffix]``
	Move all source files to a certain directory: ``--target-directory=[directory]``,``-t [directory]``
	Ignore trailing slashes in the source file: ``--strip-trailing-slashes``
Delete a file: ``$ rm [file]``
	Remove a directory and all files inside of it: ``--recursive``,``-r``,``-R``
	Remove an empty directory: ``--dir``,``-d``
	Never ask the user to confirm anything: ``--force``,``-f``
	Prompt before every file being removed: ``-i``
	Prompt once if removing more than 3 files: ``-I``
	Show everything being done: ``--verbose``,``-v``
	Ignore files that are part of a different filesystem: ``--one-filesystem``
	Allow removing the root directory: ``--no-preserve-root``
Create, or change the timestamp of a file: ``$ touch [new/existing file]``
	Do not create new files: ``--no-create``,``-c``
	Change only the access time: ``-a``
	Change only the modification time: ``-m``
	Change the time to that of another file: ``-r [file]`` ``--reference=[file]``
	Parse the specified string and use it instead of current time: ``--date=[string]``,``-d [string]``
	Set time to a timestamp in the form [[CC]YY]MMDDhhmm[.ss]: ``-t [timestamp]``
